# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0be4daf96ecd'
down_revision = '3acb947457ed'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    integrations_table = op.create_table(
        'integrations',
        sa.Column('name', sa.Unicode(), nullable=False),
        sa.Column('description', sa.Unicode(), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint('name')
    )

    op.bulk_insert(integrations_table, [
        {'name': 'api', 'description': '', 'active': True},
        {'name': 'github', 'description': '', 'active': True},
        {'name': 's3', 'description': '', 'active': True},
    ])

    op.create_table(
        'integration_users',
        sa.Column('integration_name', sa.Unicode(), nullable=False),
        sa.Column('user_id', sa.Unicode(), nullable=False),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('conf', postgresql.JSONB(), nullable=True),
        sa.ForeignKeyConstraint(
            ['integration_name'], ['integrations.name'], ondelete='CASCADE',
            name='integration_users_integrations_fkey'),
        sa.ForeignKeyConstraint(
            ['user_id'], ['users.id'], ondelete='CASCADE',
            name='integration_users_users_fkey'),
        sa.PrimaryKeyConstraint('integration_name', 'user_id')
    )
    op.create_table(
        'sources',
        sa.Column('id', sa.Unicode(), nullable=False),
        sa.Column('name', sa.Unicode(), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('updated', sa.DateTime(timezone=True), nullable=False),
        sa.Column('integration_name', sa.Unicode(), nullable=True),
        sa.Column('conf', postgresql.JSONB()),
        sa.ForeignKeyConstraint(
            ['integration_name'], ['integrations.name'],
            name='sources_integrations_fkey'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'source_users',
        sa.Column('source_id', sa.Unicode(), nullable=False),
        sa.Column('user_id', sa.Unicode(), nullable=False),
        sa.Column('role', sa.Unicode(), nullable=False),
        sa.ForeignKeyConstraint(
            ['source_id'], ['sources.id'], ondelete='CASCADE',
            name='source_users_sources_fkey'),
        sa.ForeignKeyConstraint(
            ['user_id'], ['users.id'], ondelete='CASCADE',
            name='source_users_users_fkey'),
        sa.PrimaryKeyConstraint('source_id', 'user_id')
    )
    op.add_column('jobs', sa.Column('source_id', sa.Unicode(), nullable=True))
    op.create_foreign_key(
        'jobs_sources_fkey', 'jobs', 'sources', ['source_id'], ['id'])
    op.create_foreign_key(
        'jobs_integrations_fkey', 'jobs', 'integrations',
        ['integration_name'], ['name'])

    op.alter_column('jobs', 'integration_conf', new_column_name='conf')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('jobs', 'conf', new_column_name='integration_conf')
    op.drop_constraint('jobs_sources_fkey', 'jobs', type_='foreignkey')
    op.drop_constraint('jobs_integrations_fkey', 'jobs', type_='foreignkey')
    op.drop_column('jobs', 'source_id')
    op.drop_table('source_users')
    op.drop_table('sources')
    op.drop_table('integration_users')
    op.drop_table('integrations')
    # ### end Alembic commands ###
